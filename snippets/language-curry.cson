'.source.curry':
  '… -> …':
    'prefix': '->'
    'body': '${1:expression} -> ${0:expression}'
  'List Comprehension':
    'prefix': '['
    'body': '[${1:expression} | ${2:${3:name} <- ${4:expression}}$0'
  '{-# … #-}':
    'prefix': '{-#'
    'body': '{-# $1 #-'
  'Lambda Expression':
    'prefix': '\\'
    'body': '\\\\${1:pattern} -> ${0:expression}'
  '… <- …':
    'prefix': '<-'
    'body': '${1:name} <- ${0:expression}'
  'Definition':
    'prefix': '='
    'body': '${1:name} ${2:pattern} = ${0:expression}'
  'Guard':
    'prefix': '|'
    'body': '| ${1:predicate} = ${0:expression}'
  'case … of …':
    'prefix': 'case'
    'body': """
      case ${1:expression} of
      \t${2:pattern} -> ${3:expression}
      \t${4:otherwise} -> ${0:expression}
    """
  'data …':
    'prefix': 'data'
    'body': 'data ${1:Type} = ${0:Other}'
  'do …':
    'prefix': 'do'
    'body': """
      do
      \t${1:${2:name} <- ${3:expression}}
      \t${4:return ${0:expression}}
    """
  'Function':
    'prefix': 'func'
    'body': """
      ${1:name} :: ${2:Type}
      $1 ${3:pattern} = ${0:expression}
    """
  'if … then … else …':
    'prefix': 'if'
    'body': """
      if ${1:condition}
      \tthen ${2:expression}
      \telse ${0:expression}
    """
  'import …':
    'prefix': 'imp'
    'body': 'import ${0:Module}'
  'import … hiding …':
    'prefix': 'imph'
    'body': 'import ${1:Module} hiding (${2:name})'
  'import qualified …':
    'prefix': 'impq'
    'body': 'import qualified ${1:Module}${2: as ${3:Mod}}'
  'let … in …':
    'prefix': 'let'
    'body': """
      let
      \t${1:name} = ${2:expression}
      \tin ${0:expression}
    """
  'main':
    'prefix': 'main'
    'body': """
      main :: IO ()
      main = ${0:putStrLn "Hello World!"}
    """
  'module … where':
    'prefix': 'module'
    'body': """
      module ${1:Name}
      \t(
      \t) where
    """
  'type …':
    'prefix': 'type'
    'body': 'type ${1:Type} = ${0:Other}'
  'where …':
    'prefix': 'where'
    'body': """
      where
      \t${0:definitions}
    """